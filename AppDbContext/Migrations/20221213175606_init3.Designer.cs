// <auto-generated />
using System;
using AppDbContext.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AppDbContext.Migrations
{
    [DbContext(typeof(ECOMMERCEContext))]
    [Migration("20221213175606_init3")]
    partial class init3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AppDbContext.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUsers", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("Age")
                        .HasColumnName("age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("createdAt")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnName("gender")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnName("modifiedAt")
                        .HasColumnType("date");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AppDbContext.Models.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Attribute");
                });

            modelBuilder.Entity("AppDbContext.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("AppDbContext.Models.CategoryAttr", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("AttrId")
                        .HasColumnName("attr_id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnName("unit_id")
                        .HasColumnType("int");

                    b.Property<int>("ValueId")
                        .HasColumnName("value_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttrId");

                    b.HasIndex("CategoryId")
                        .HasName("IX_category_attr_category_id");

                    b.HasIndex("UnitId");

                    b.HasIndex("ValueId")
                        .HasName("IX_category_attr_value_id");

                    b.ToTable("Category_attr");
                });

            modelBuilder.Entity("AppDbContext.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Comment1")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("ProdutId")
                        .HasColumnName("produt_id")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProdutId")
                        .HasName("IX_comment_produt_id");

                    b.HasIndex("UserId")
                        .HasName("IX_comment_user_id");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("AppDbContext.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("createdAt")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnName("modifiedAt")
                        .HasColumnType("date");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("text")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("IX_notification_user_id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("AppDbContext.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<byte>("IsPaid")
                        .HasColumnName("isPaid")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnName("orderDate")
                        .HasColumnType("date");

                    b.Property<int>("Price")
                        .HasColumnName("price")
                        .HasColumnType("int");

                    b.Property<int>("ShippingId")
                        .HasColumnName("shipping_id")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnName("state")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShippingId")
                        .HasName("IX_order_shipping_id");

                    b.HasIndex("UserId")
                        .HasName("IX_order_user_id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("AppDbContext.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("int");

                    b.Property<int?>("Dicount")
                        .HasColumnName("dicount")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnName("price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasName("IX_product_category_id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("AppDbContext.Models.ProductAttr", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("AttrId")
                        .HasColumnName("attr_id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnName("unit_id")
                        .HasColumnType("int");

                    b.Property<int>("ValueId")
                        .HasColumnName("value_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttrId")
                        .HasName("IX_product_attr_attr_id");

                    b.HasIndex("ProductId")
                        .HasName("IX_product_attr_product_id");

                    b.HasIndex("UnitId");

                    b.HasIndex("ValueId")
                        .HasName("IX_product_attr_value_id");

                    b.ToTable("Product_attr");
                });

            modelBuilder.Entity("AppDbContext.Models.ProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnName("order_id")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnName("price")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasName("IX_product_order_product_id");

                    b.ToTable("Product_order");
                });

            modelBuilder.Entity("AppDbContext.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnName("rate")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasName("IX_rating_product_id");

                    b.HasIndex("UserId")
                        .HasName("IX_rating_user_id");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("AppDbContext.Models.Shipping", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("date");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Shipping");
                });

            modelBuilder.Entity("AppDbContext.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("AppDbContext.Models.ValueAttr", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Value_attr");
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("AppDbContext.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("AppDbContext.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("AppDbContext.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("AppDbContext.Models.AspNetRoles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.AspNetUsers", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("AppDbContext.Models.AspNetUsers", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.CategoryAttr", b =>
                {
                    b.HasOne("AppDbContext.Models.Attribute", "Attr")
                        .WithMany("CategoryAttr")
                        .HasForeignKey("AttrId")
                        .HasConstraintName("FK_category_attr_attribute")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.Category", "Category")
                        .WithMany("CategoryAttr")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_category_attr_category")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.Unit", "Unit")
                        .WithMany("CategoryAttr")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_Category_attr_Unit")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.ValueAttr", "Value")
                        .WithMany("CategoryAttr")
                        .HasForeignKey("ValueId")
                        .HasConstraintName("FK_category_attr_value")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.Comment", b =>
                {
                    b.HasOne("AppDbContext.Models.Product", "Produt")
                        .WithMany("Comment")
                        .HasForeignKey("ProdutId")
                        .HasConstraintName("FK_comment_product")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.AspNetUsers", "User")
                        .WithMany("Comment")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_comment_AspNetUsers")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.Notification", b =>
                {
                    b.HasOne("AppDbContext.Models.AspNetUsers", "User")
                        .WithMany("Notification")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_notification_AspNetUsers")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.Order", b =>
                {
                    b.HasOne("AppDbContext.Models.Shipping", "Shipping")
                        .WithMany("Order")
                        .HasForeignKey("ShippingId")
                        .HasConstraintName("FK_order_shipping")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.AspNetUsers", "User")
                        .WithMany("Order")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_order_AspNetUsers")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.Product", b =>
                {
                    b.HasOne("AppDbContext.Models.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_product_category")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.ProductAttr", b =>
                {
                    b.HasOne("AppDbContext.Models.Attribute", "Attr")
                        .WithMany("ProductAttr")
                        .HasForeignKey("AttrId")
                        .HasConstraintName("FK_product_attr_attribute")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.Product", "Product")
                        .WithMany("ProductAttr")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_product_attr_product")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.Unit", "Unit")
                        .WithMany("ProductAttr")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_Product_attr_Unit")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.ValueAttr", "Value")
                        .WithMany("ProductAttr")
                        .HasForeignKey("ValueId")
                        .HasConstraintName("FK_product_attr_value")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.ProductOrder", b =>
                {
                    b.HasOne("AppDbContext.Models.Order", "Product")
                        .WithMany("ProductOrder")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_product_order_order")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.Product", "ProductNavigation")
                        .WithMany("ProductOrder")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_product_order_product")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDbContext.Models.Rating", b =>
                {
                    b.HasOne("AppDbContext.Models.Product", "Product")
                        .WithMany("Rating")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_rating_product")
                        .IsRequired();

                    b.HasOne("AppDbContext.Models.AspNetUsers", "User")
                        .WithMany("Rating")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_rating_AspNetUsers")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
